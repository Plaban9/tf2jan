*** Settings ***
Resource          ../operator_resources.txt
Resource          ../../CLI/cli_resources.txt
Resource          ../../CLI/dtcli/dtcli_resources.txt
Library           ../../../lib/CLI/dtingest/DTCPLib.py
Library           DateTime

*** Keywords ***
RUNit
    [Arguments]    ${params}    ${timeout}=10    ${cliConfig}=${EMPTY}    ${valChq}=${True}    ${validateData}=${True}    ${kill}=${True}
    ...    ${testFaultT}=${False}    ${testDynamicS}=${False}
    Append To File    ${dtcli_log}    ${TEST_NAME} ${SPACE}${:}${SPACE}
    #Get SQL details like: tablein, tableout, dbname
    Get SQL Details    ${params}
    # Cleanup Old data in output table
    Cleanup    ${tableout}
    #>>>>>>> Launch file-copy app
    # Enter the Apex CLI prompt
    Dtcli Enter
    #Create conf for apexcli 'launch' command
    ${cliConfig}=    Catenate    SEPARATOR=${SPACE}    -exactMatch ${APP_NAME}    ${cliConfig}
    #Create properties file with operator params
    ${confFile}=    Create Properties File From Dict    ${params}
    #Update conf for apexcli 'launch' command with properties file path
    ${cliConfig}=    Catenate    SEPARATOR=${SPACE}    ${cliConfig}    -conf ${confFile}
    #Launch application in Apex CLI
    ${app_id}    ${cmd_stdout}=    Launch App    ${app_pkg}    ${cliConfig}    ${APP_NAME}
    Set Test Variable    ${app_id}
    #>>>>>>> Some basic validation
    Check App State    ${app_id}    expected=RUNNING
    Run Keyword If    ${valChq}==${True}    Check Operator Property Values    ${app_id}    ${OP_NAME}    ${params}
    #>>>>>>> Fault tolerance test
    Run Keyword If    ${testFaultT}==${True}    Kill Container Test    ${app_id}    ${OP_NAME}    wait=30s
    #>>>>>>> Dynamic Scalability test
    Run Keyword If    ${testDynamicS}==${True}    Check Dynamic Scalability    ${app_id}    ${OP_NAME}    ${OP_NAME}    partitionCount
    ...    10
    #Poll for app status
    Run Keyword If    ${validateData}==${True}    Poll For App Status Using Tuples Count    ${app_id}    ${timeout}    #timeout is in int(minutes)
    # Exit out of the Apex CLI prompt
    Dtcli Exit    ${app_id}    kill=${kill}
    #>>>>>>> Actual data validation
    Run Keyword If    ${validateData}==${True}    Validate Data    ${params}

Validate Data
    [Arguments]    ${params}
    ${whereClause}=    Get Where Clause    ${params}
    Set Test Variable    ${whereClause}
    ${join_query}=    Create Join Query    ${params}
    ${join_count}=    Execute MySQL Query    ${join_query}    #WHERE clause is not necessary for JOIN
    ${tin_query}=    Set Variable    SELECT COUNT(*) FROM ${tablein}
    ${tin_count}=    Execute MySQL Query    ${tin_query} ${whereClause}
    ${tout_query}=    Set Variable    SELECT COUNT(*) FROM ${tableout}
    ${tout_count}=    Execute MySQL Query    ${tout_query}    #WHERE clause should not be applied to OUTPUT
    Should Be Equal    ${join_count}    ${tin_count}
    Should Be Equal    ${join_count}    ${tout_count}

Get Where Clause
    [Arguments]    ${params}
    #Here, 2 Evaluate statements are used to avoid escaping symbols in ${condition}
    ${bool}=    Evaluate    "dt.operator.JdbcInput.prop.whereCondition" in ${params}
    ${condition}=    Evaluate    $params.get("dt.operator.JdbcInput.prop.whereCondition", "ERROR")
    ${whereClause}=    Set Variable If    ${bool}    WHERE ${condition}    ${EMPTY}
    [Return]    ${whereClause}

Create Join Query
    [Arguments]    ${params}
    ${colExp}=    Evaluate    $params.get("dt.operator.JdbcInput.prop.columnsExpression", "customerName, customerPhone, customerEmail, city, country, uid, accountNumber, txId, txAmount")
    ${colExp}=    Replace String    ${colExp}    ${SPACE}    ${EMPTY}
    ${cols}=    Split String    ${colExp}    separator=,
    ${castCols}=    Create List    txAmount
    ${query}=    Set Variable    SELECT COUNT(*) FROM ${tablein} as A JOIN ${tableout} as B ON
    : FOR    ${x}    IN    @{cols}
    \    ${bool}=    Evaluate    "${x}" in ${castCols}
    \    ${clause}=    Set Variable If    ${bool}    CAST(A.${x} AS CHAR(10))=CAST(B.${x} AS CHAR(10))    A.${x}=B.${x}
    \    ${query}=    Catenate    SEPARATOR=${SPACE}    ${query}    ${clause} AND
    ${query}=    Replace String Using Regexp    ${query}    ${SPACE}AND$    ${EMPTY}
    [Return]    ${query}

Get SQL Details
    [Arguments]    ${params}
    ${tablein}=    Get From Dictionary    ${params}    dt.operator.JdbcInput.prop.tableName
    ${tableout}=    Get From Dictionary    ${params}    dt.operator.JdbcOutput.prop.tablename
    ${dburl}=    Get From Dictionary    ${params}    dt.operator.JdbcInput.prop.store.databaseUrl
    @{tmp}=    Split String    ${dburl}    separator=/
    ${dbname}=    Get From List    ${tmp}    -1
    Set Test Variable    ${tablein}
    Set Test Variable    ${tableout}
    Set Test Variable    ${dbname}
    Return From Keyword    ${tablein}    ${tableout}    ${dbname}

Execute MySQL Query
    [Arguments]    ${query}
    ${query}    Catenate    SEPARATOR=${SPACE}    mysql -u ${uname} -p${pswd} -h ${host} -Nsr -e    "${query}"    ${dbname}
    Log    Query:: ${query}
    ${result}=    Write Read Prompt    ${query}
    Should Not Match    ${result}    error in your SQL syntax
    Return From Keyword    ${result}

Insert Data Into Table And Validate
    [Arguments]    ${params}    ${table}    ${num}    ${timeout}    ${kill}=${True}
    Insert Data Into Table    ${table}    ${num}
    Sleep    10s    #Wait some time for Poller to start polling data
    Dtcli Enter
    Poll For App Status Using Tuples Count    ${app_id}    ${timeout}    #timeout is in int(minutes)
    Dtcli Exit    ${app_id}    kill=${kill}
    Validate Data    ${params}

Insert Data Into Table
    [Arguments]    ${table}    ${num}
    ${infile}=    Set Variable    /tmp/input.sql
    Create File    ${infile}
    : FOR    ${n}    IN RANGE    1    ${num}+1
    \    ${record}=    Create A Record
    \    Append To File    ${infile}    ${record}${\n}
    Put File    ${infile}    ${infile}    mode=0777
    ${query}=    Set Variable    LOAD DATA INFILE '${infile}' INTO TABLE ${table} FIELDS TERMINATED BY ','
    Execute MySQL Query    ${query}

Delete Data From OutTable And Validate
    [Arguments]    ${params}    ${table}    ${num}    ${timeout}
    ${query}=    Set Variable    DELETE FROM ${table} limit ${num}
    Execute MySQL Query    ${query}
    Sleep    ${timeout}
    Validate Data    ${params}

Create A Record
    @{fields}=    Create List    NAME    PHONE    EMAIL    CITY    COUNTRY
    ...    UID    ACCNO    TxID    TxDATE    TxAMT    LABEL
    @{types}=    Create List    varchar    varchar    varchar    varchar    varchar
    ...    varchar    varchar    int    date    float    varchar
    ${len}=    Get Length    ${fields}
    ${record}=    Set Variable    ${EMPTY}
    : FOR    ${i}    IN RANGE    0    ${len}
    \    ${alnum}=    Generate Random String    length=4
    \    ${justnum}=    Generate Random String    length=7    chars=123456789
    \    ${date}=    Get Current Date    result_format=%Y-%m-%d
    \    ${field}=    Get From List    ${fields}    ${i}
    \    ${type}=    Get From List    ${types}    ${i}
    \    ${cellval}=    Set Variable If    '${type}'=='varchar'    ${field}_${alnum}
    \    ${cellval}=    Set Variable If    '${type}'=='int' or '${type}'=='float' or '${type}'=='decimal'    ${justnum}    ${cellval}
    \    ${cellval}=    Set Variable If    '${type}'=='date'    ${date}    ${cellval}
    \    ${record}=    Catenate    SEPARATOR=,    ${record}    ${cellval}
    ${record}=    Replace String    ${record}    ,    ${EMPTY}    count=1
    Return From Keyword    ${record}

Cleanup
    [Arguments]    ${tableout}
    ${query}=    Set Variable    SELECT COUNT(*) FROM ${tableout}
    ${result}=    Execute MySQL Query    ${query}
    ${query}=    Set Variable    TRUNCATE ${tableout}
    ${result}=    Execute MySQL Query    ${query}
    ${query}=    Set Variable    SELECT COUNT(*) FROM ${tableout}
    ${result}=    Execute MySQL Query    ${query}
